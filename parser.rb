#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 139)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.tokenize(code)
    puts @tokens.inspect if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    22,    31,    21,    19,    20,    32,    12,    13,    14,    15,
    16,    17,    18,    22,    56,    21,    19,    20,    52,    12,
    13,    14,    15,    16,    17,    18,    22,    33,    21,    19,
    20,    58,    12,    13,    14,    15,    16,    17,    18,    22,
    34,    21,    19,    20,    35,    12,    13,    14,    15,    16,
    17,    18,    22,    48,    21,    19,    20,    23,    12,    13,
    14,    15,    16,    17,    18,    22,    64,    21,    19,    20,
    40,    12,    13,    14,    15,    16,    17,    18,    22,    38,
    21,    19,    20,    48,    12,    13,    14,    15,    16,    17,
    18,    22,    67,    21,    19,    20,    48,    12,    13,    14,
    15,    16,    17,    18,    22,   nil,    21,    19,    20,   nil,
    12,    13,    14,    15,    16,    17,    18,    22,   nil,    21,
    19,    20,   nil,    12,    13,    14,    15,    16,    17,    18,
    22,   nil,    21,    19,    20,    25,    12,    13,    14,    15,
    16,    17,    18,    25,    27,    26,    48,    28,    29,   nil,
   nil,    27,    63,    26,    28,    29,    48,    48,   nil,    27,
    47,    27,    28,    29,    28,    29,    27,   nil,    27,    28,
    29,    28,    29,    27,   nil,    27,    28,    29,    28,    29,
    27,   nil,   nil,    28,    29,    65,    53,    54,    54,    61,
   nil,    62 ]

racc_action_check = [
     0,    17,     0,     0,     0,    17,     0,     0,     0,     0,
     0,     0,     0,    32,    47,    32,    32,    32,    40,    32,
    32,    32,    32,    32,    32,    32,    24,    18,    24,    24,
    24,    51,    24,    24,    24,    24,    24,    24,    24,    54,
    19,    54,    54,    54,    20,    54,    54,    54,    54,    54,
    54,    54,    52,    35,    52,    52,    52,     1,    52,    52,
    52,    52,    52,    52,    52,    48,    58,    48,    48,    48,
    27,    48,    48,    48,    48,    48,    48,    48,    31,    23,
    31,    31,    31,    61,    31,    31,    31,    31,    31,    31,
    31,    33,    62,    33,    33,    33,    64,    33,    33,    33,
    33,    33,    33,    33,    21,   nil,    21,    21,    21,   nil,
    21,    21,    21,    21,    21,    21,    21,    22,   nil,    22,
    22,    22,   nil,    22,    22,    22,    22,    22,    22,    22,
    30,   nil,    30,    30,    30,     2,    30,    30,    30,    30,
    30,    30,    30,    57,    44,     2,    36,    44,    44,   nil,
   nil,    36,    57,    57,    36,    36,    37,    34,   nil,    60,
    34,    37,    60,    60,    37,    37,    43,   nil,    41,    43,
    43,    41,    41,     3,   nil,    45,     3,     3,    45,    45,
    39,   nil,   nil,    39,    39,    59,    42,    59,    42,    55,
   nil,    55 ]

racc_action_pointer = [
    -2,    57,   128,   153,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   -17,     5,    27,
    30,   102,   115,    79,    24,   nil,   nil,    57,   nil,   nil,
   128,    76,    11,    89,   142,    38,   131,   141,   nil,   160,
     0,   148,   167,   146,   124,   155,   nil,     1,    63,   nil,
   nil,    24,    50,   nil,    37,   170,   nil,   136,    63,   166,
   139,    68,    79,   nil,    81,   nil,   nil,   nil,   nil ]

racc_action_default = [
    -1,   -44,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -16,   -17,   -18,   -19,   -20,   -21,   -28,   -44,
   -44,   -44,   -44,   -44,    -5,   -14,   -15,   -44,   -40,   -41,
   -44,   -25,   -44,   -44,   -44,   -44,   -44,   -44,    69,    -4,
   -23,   -42,   -44,   -26,   -29,   -30,   -31,   -33,   -44,   -36,
   -37,   -38,   -25,   -22,   -44,   -44,   -34,   -44,   -44,   -44,
   -27,   -44,   -44,   -43,   -44,   -24,   -32,   -35,   -39 ]

racc_goto_table = [
     2,    36,    37,    42,    39,     1,    46,    49,    50,    51,
    41,    43,    44,    45,    55,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    59,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    43,    66,    60,   nil,    68,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    57 ]

racc_goto_check = [
     2,     3,     3,    13,     3,     1,    14,    14,    14,    14,
     3,     3,     3,     3,    15,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,    14,     3,   nil,    14,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2 ]

racc_goto_pointer = [
   nil,     5,     0,   -20,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -28,   -28,   -33,   nil ]

racc_goto_default = [
   nil,   nil,   nil,     3,    24,     4,     5,     6,     7,     8,
     9,    10,    11,   nil,   nil,   nil,    30 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 26, :_reduce_1,
  1, 26, :_reduce_2,
  1, 27, :_reduce_3,
  3, 27, :_reduce_4,
  2, 27, :_reduce_5,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 28, :_reduce_none,
  1, 29, :_reduce_none,
  1, 29, :_reduce_none,
  1, 30, :_reduce_16,
  1, 30, :_reduce_17,
  1, 30, :_reduce_18,
  1, 30, :_reduce_19,
  1, 30, :_reduce_20,
  1, 31, :_reduce_21,
  4, 31, :_reduce_22,
  3, 31, :_reduce_23,
  6, 31, :_reduce_24,
  0, 38, :_reduce_25,
  1, 38, :_reduce_26,
  3, 38, :_reduce_27,
  1, 32, :_reduce_28,
  3, 33, :_reduce_29,
  3, 33, :_reduce_30,
  3, 34, :_reduce_31,
  6, 34, :_reduce_32,
  0, 40, :_reduce_33,
  1, 40, :_reduce_34,
  3, 40, :_reduce_35,
  3, 35, :_reduce_36,
  3, 37, :_reduce_37,
  3, 36, :_reduce_38,
  6, 36, :_reduce_39,
  1, 41, :_reduce_none,
  1, 41, :_reduce_none,
  3, 31, :_reduce_42,
  3, 39, :_reduce_43 ]

racc_reduce_n = 44

racc_shift_n = 69

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :WHILE => 4,
  :DEF => 5,
  :CLASS => 6,
  :NEWLINE => 7,
  :NUMBER => 8,
  :STRING => 9,
  :TRUE => 10,
  :FALSE => 11,
  :NIL => 12,
  :IDENTIFIER => 13,
  :CONSTANT => 14,
  :INDENT => 15,
  :DEDENT => 16,
  ";" => 17,
  "(" => 18,
  ")" => 19,
  "." => 20,
  "," => 21,
  "=" => 22,
  "+" => 23,
  "-" => 24 }

racc_nt_base = 25

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "WHILE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "INDENT",
  "DEDENT",
  "\";\"",
  "\"(\"",
  "\")\"",
  "\".\"",
  "\",\"",
  "\"=\"",
  "\"+\"",
  "\"-\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "While",
  "ArgList",
  "Block",
  "ParamList",
  "BinaryOperator" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 20)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 21)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 26)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 27)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 29)
  def _reduce_5(val, _values, result)
     result = Nodes.new([val[0]]) 
    result
  end
.,.,

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_16(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_17(val, _values, result)
     result = LiteralNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 54)
  def _reduce_18(val, _values, result)
     result = LiteralNode.new(true) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_19(val, _values, result)
     result = LiteralNode.new(false) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_20(val, _values, result)
     result = LiteralNode.new(nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 62)
  def _reduce_21(val, _values, result)
     result = CallNode.new(nil, val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 64)
  def _reduce_22(val, _values, result)
     result = CallNode.new(nil, val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 66)
  def _reduce_23(val, _values, result)
     result = CallNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 69)
  def _reduce_24(val, _values, result)
     result = CallNode.new(val[0], val[2], val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 73)
  def _reduce_25(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 74)
  def _reduce_26(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_27(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 79)
  def _reduce_28(val, _values, result)
     result = GetConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_29(val, _values, result)
     result = SetLocalNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 85)
  def _reduce_30(val, _values, result)
     result = SetConstantNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_31(val, _values, result)
     result = DefNode.new(val[1], [], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_32(val, _values, result)
     result = DefNode.new(val[1], val[3], val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 96)
  def _reduce_33(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_34(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 98)
  def _reduce_35(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 103)
  def _reduce_36(val, _values, result)
     result = ClassNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_37(val, _values, result)
     result = WhileNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_38(val, _values, result)
     result = IfNode.new(val[1], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_39(val, _values, result)
     result = IfNode.new(val[1], val[2], val[5]) 
    result
  end
.,.,

# reduce 40 omitted

# reduce 41 omitted

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 129)
  def _reduce_43(val, _values, result)
     result = val[1] 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
